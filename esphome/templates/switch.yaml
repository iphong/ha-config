<<: !include common.yaml

esphome:
  name: $host
  board: modwifi
  platform: ESP8266
  build_path: build/$host
  arduino_version: LATEST
  esp8266_restore_from_flash: false
  includes:
  - components/now.h
  platformio_options:
    upload_speed: 921600
    board_build.f_cpu: 160000000L
    board_build.f_flash: 80000000L

interval:
  interval: 10min
  then:
  - lambda: |-
      WiFi.mode(WIFI_AP_STA);
      WiFi.disconnect();
      WiFi.softAPdisconnect();

status_led:
  pin:
    number: 16
    inverted: true

output:

- platform: esp8266_pwm
  id: output_1
  pin: 4

- platform: esp8266_pwm
  id: output_2
  pin: 15

- platform: esp8266_pwm
  id: output_3
  pin: 13

light:

- platform: monochromatic
  id: light_1
  output: output_1
  default_transition_length: 0s

- platform: monochromatic
  id: light_2
  output: output_2
  default_transition_length: 0s

- platform: monochromatic
  id: light_3
  output: output_3
  default_transition_length: 0s

binary_sensor:

- platform: gpio
  id: input_1
  pin:
    number: 14
    mode: INPUT_PULLUP
    inverted: true
  on_press:
  - lambda: |-
      if (digitalRead(4))
        ESPNow.send("set $target_1 off");
      else
        ESPNow.send("set $target_1 on");

- platform: gpio
  id: input_2
  pin:
    number: 5
    mode: INPUT_PULLUP
    inverted: true
  on_press:
  - lambda: |-
      if (digitalRead(15))
        ESPNow.send("set $target_2 off");
      else
        ESPNow.send("set $target_2 on");

- platform: gpio
  id: input_3
  pin:
    number: 12
    mode: INPUT_PULLUP
    inverted: true
  on_press:
  - lambda: |-
      if (digitalRead(13))
        ESPNow.send("set $target_3 off");
      else
        ESPNow.send("set $target_3 on");

custom_component:
  lambda: |-
    ESPNow.begin();
    
    ESPNow.on("pub $target_1 on", []() {
      id(light_1)->turn_on().perform();
    });
    ESPNow.on("pub $target_1 off", []() {
      id(light_1)->turn_off().perform();
    });

    ESPNow.on("pub $target_2 on", []() {
      id(light_2)->turn_on().perform();
    });
    ESPNow.on("pub $target_2 off", []() {
      id(light_2)->turn_off().perform();
    });

    ESPNow.on("pub $target_3 on", []() {
      id(light_3)->turn_on().perform();
    });
    ESPNow.on("pub $target_3 off", []() {
      id(light_3)->turn_off().perform();
    });

    ESPNow.send("req $target_1");
    ESPNow.send("req $target_2");
    ESPNow.send("req $target_3");

    return {};
  